// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// User types
//   1 = admin0
//   2 = admin1
//   3 = creator
//   4 = follower

// profilePhoto = 0 indicates there is no profile photo
model user{
  userId Int @id @default(autoincrement())
  type Int
  name String @db.VarChar(64)
  email String @db.VarChar(128) @unique
  bio String? @db.VarChar(2048)
  emailStatus Boolean @default(false)
  username String @db.VarChar(128) @unique
  phone String? @db.Char(10)
  joinedDate DateTime @default(now())
  profilePhoto String @db.VarChar(256) @default("0.jpg")
  password String @db.VarChar(128)
  forgotPasswordOtp String? @db.VarChar(5)
  emailVerificationOtp String? @db.VarChar(5)
  blockedStatus Boolean @default(false)
  blockedDate DateTime?
  blockedAdminID Int?
  premiumUser Boolean @default(false)
  premiumPackageEndDate DateTime @default(now())
  advertisementVisibility Boolean @default(true)
  blockedAdmin user? @relation("adminBlockFollowerCreator", fields: [blockedAdminID],references: [userId], onUpdate: Cascade, onDelete: Cascade)
  blockedUser user[] @relation("adminBlockFollowerCreator")
  followerCreator followerCreator?
  userReportResolvedAdmins userReport[] 
  postReports postReport[]
  commentReports commentReport[]
  advertisementReports advertisementReport[]
  // creatorChats chatHistory[] @relation("creatorUser")
}

// coverPhoto = 0 indicates there is no cover photo
model followerCreator{
  user user @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  userId Int @id
  coverPhoto String @db.VarChar(256) @default("0.png")
  // blockedStatus Boolean @default(false)
  creator creator?
  billingAddresses billingAddress[]
  packages premiumPackageSubscribe[]
  userSubscribes userSubscribe[]
  postReactions postReaction[]
  comments comment[]
  commentReactions commentReaction[]
  creatorViews creatorView[]
  postViews postView[]
  advertisementViews advertisementView[]
  users userBlocked[] @relation("user")
  userBlocks userBlocked[] @relation("blockedUser")
  sourceUsers userReport[] @relation("sourceReportedUser")
  reportedUsers userReport[] @relation("reportedUser")
  postReports postReport[]
  commentReports commentReport[]
  advertisementReports advertisementReport[]
  postSaves postSave[]
  transactions transactionLog[]
}

// loyalty category
//   1 = base
//   2 = silver
//   3 = gold
//   4 = platinum

// wallet address = 0 idicates user is not validated

// openSea status
//   0 = verification is not done yet
//   1 = verified account
//   2 = valid account
model creator{
  followerCreator followerCreator @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  userId Int @id
  pageName String @db.VarChar(64) @unique
  description String? @db.VarChar(512)
  creatorJoinedDate DateTime @default(now())
  walletAddress String? @db.VarChar(64) @unique
  openSeaUsername String? @db.VarChar(64) @unique
  openSeaStatus Int @default(0)
  followerCount Int @default(0)
  isfollowerCountVisible Boolean @default(true)
  loyaltyCategory Int @default(1)
  subscribeByUser userSubscribe[]
  posts post[]
  advertisements advertisement[]
  creatorViews creatorView[]
}

// this table includes details about blocked users by other users
model userBlocked{
  userBlockedId Int @id @default(autoincrement())
  user followerCreator @relation("user", fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  blockedUser followerCreator @relation("blockedUser", fields: [blockedUserId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  blockedUserId Int
  userBlockedDate DateTime @default(now())
  @@unique([userId, blockedUserId])
}

model billingAddress{
  billingAddressId Int @id @default(autoincrement())
  user followerCreator @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  country String @db.VarChar(32)
  addressLine1 String @db.VarChar(64)
  addressLine2 String? @db.VarChar(64)
  city String @db.VarChar(32)
  state String @db.VarChar(32)
  zipCode String @db.VarChar(16)
  isDefault Boolean @default(false)
}

model premiumPackage{
  packageId Int @id @default(autoincrement())
  name String @db.VarChar(64) @unique
  description String? @db.VarChar(1024)
  price Decimal @db.Decimal(65, 2)
  users premiumPackageSubscribe[]
}

model premiumPackageSubscribe{
  subscribeId Int @id @default(autoincrement())
  user followerCreator @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  package premiumPackage @relation(fields: [packageId], references: [packageId], onUpdate: Cascade, onDelete: Cascade)
  packageId Int
  startDate DateTime
  endDate DateTime
  adStatus Int @default(1)
  showAd Boolean @default(true)
}

model userSubscribe{
  userSubscribeId Int @id @default(autoincrement())
  follower followerCreator @relation(fields: [followerId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  followerId Int
  creator creator @relation(fields: [creatorId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  creatorId Int
  subscribedDate DateTime @default(now())
  @@unique([followerId, creatorId])
}

// imagevideo = 0 indicates there is no photo OR video
model post{
  postId Int @id @default(autoincrement())
  creator creator @relation(fields: [creatorId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  creatorId Int
  description String? @db.VarChar(512)
  imagevideo String? @db.VarChar(256) @default("0")
  publishedDate DateTime @default(now())
  reactCount Int @default(0)
  commentCount Int @default(0)
  blockedStatus Boolean @default(false)
  postReactions postReaction[]
  comments comment[]
  postViews postView[]
  postReports postReport[]
  postSaves postSave[]
}

model postSave{
  postSaveId Int @id @default(autoincrement())
  post post @relation(fields: [postId], references: [postId], onUpdate: Cascade, onDelete: Cascade)
  postId Int
  user followerCreator @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  postSavedDate DateTime @default(now())
  @@unique([postId, userId])
}

// react types
//   1 = like
model postReaction{
  postReactionId Int @id @default(autoincrement())
  post post @relation(fields: [postId], references: [postId], onUpdate: Cascade, onDelete: Cascade)
  postId Int
  user followerCreator @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  reactType Int @default(1)
  reacteddate DateTime @default(now())
  @@unique([postId, userId])
}

model comment{
  commentId Int @id @default(autoincrement())
  post post @relation(fields: [postId], references: [postId], onUpdate: Cascade, onDelete: Cascade)
  postId Int
  user followerCreator @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  description String @db.VarChar(512)
  commentedDate DateTime @default(now())
  blockedStatus Boolean @default(false)
  commentReactions commentReaction[]
  commentReports commentReport[]
}

model commentReaction{
  commentReactionId Int @id @default(autoincrement())
  comment comment @relation(fields: [commentId], references: [commentId], onUpdate: Cascade, onDelete: Cascade)
  commentId Int
  user followerCreator @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  commentReactedDate DateTime @default(now())
  @@unique([commentId, userId])
}

// category
//   1 = anime

// payment status
//   false = not paid
//   true = paid
model advertisement{
  advertisementId Int @id @default(autoincrement())
  creator creator @relation(fields: [creatorId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  creatorId Int
  category Int 
  description String? @db.VarChar(256)
  contentLink String @db.VarChar(256)
  createdDate DateTime @default(now())
  startDate DateTime
  endDate DateTime
  price Decimal @db.Decimal(65, 2)
  paymentStatus Boolean @default(false)
  blockedStatus Boolean @default(false)
  advertisementViews advertisementView[]
  advertisementReports advertisementReport[]
}

model creatorView{
  creatorProfileViewID Int @id @default(autoincrement())
  creator creator @relation(fields: [creatorId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  creatorId Int
  followerCreator followerCreator @relation(fields: [followerCreatorId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  followerCreatorId Int
  creatorViewedDate DateTime @default(now())
}

model postView{
  postViewId Int @id @default(autoincrement())
  post post @relation(fields: [postId], references: [postId], onUpdate: Cascade, onDelete: Cascade)
  postId Int
  followerCreator followerCreator @relation(fields: [followerCreatorId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  followerCreatorId Int
  postViewedDate DateTime @default(now())
}

model advertisementView{
  advertisementViewId Int @id @default(autoincrement())
  advertisement advertisement @relation(fields: [advertisementId], references: [advertisementId], onUpdate: Cascade, onDelete: Cascade)
  advertisementId Int
  followerCreator followerCreator @relation(fields: [followerCreatorId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  followerCreatorId Int
  advertisementViewedDate DateTime @default(now())
}

model userReport{
  userReportedId Int @id @default(autoincrement())
  user followerCreator @relation("sourceReportedUser", fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  reportedUser followerCreator @relation("reportedUser", fields: [reportedUserId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  reportedUserId Int
  userReportedDate DateTime @default(now())
  reportCategory Int
  description String? @db.VarChar(512)
  resolveStatus Boolean @default(false)
  resolvedAdmin user? @relation(fields: [resolvedAdminID], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  resolvedAdminID Int?
}

model postReport{
  postReportId Int @id @default(autoincrement())
  user followerCreator @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  post post @relation(fields: [reportedPostId], references: [postId], onUpdate: Cascade, onDelete: Cascade)
  reportedPostId Int
  postReportedDate DateTime @default(now())
  reportCategory Int
  description String? @db.VarChar(512)
  resolveStatus Boolean @default(false)
  resolvedAdmin user? @relation(fields: [resolvedAdminID], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  resolvedAdminID Int?
}

model commentReport{
  commentReportId Int @id @default(autoincrement())
  user followerCreator @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  comment comment @relation(fields: [reportedCommentId], references: [commentId], onUpdate: Cascade, onDelete: Cascade)
  reportedCommentId Int
  commentReportedDate DateTime @default(now())
  reportCategory Int
  description String? @db.VarChar(512)
  resolveStatus Boolean @default(false)
  resolvedAdmin user? @relation(fields: [resolvedAdminID], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  resolvedAdminID Int?
}

model advertisementReport{
  advertisementReportId Int @id @default(autoincrement())
  user followerCreator @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  advertisement advertisement @relation(fields: [advertisementId], references: [advertisementId], onUpdate: Cascade, onDelete: Cascade)
  advertisementId Int
  postReportedDate DateTime @default(now())
  reportCategory Int
  description String? @db.VarChar(512)
  resolveStatus Boolean @default(false)
  resolvedAdmin user? @relation(fields: [resolvedAdminID], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  resolvedAdminID Int?
}

// transactionType
//   1 = advertisements
//   2 = premium package subscription
model transactionLog{
  transactionId Int @id @default(autoincrement())
  user followerCreator @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  transactionType Int
  stripeId String @db.VarChar(64)
  amount Decimal @db.Decimal(65, 2)
  transactionDate DateTime @default(now())
}

model chatHistory{
  messageId Int @id @default(autoincrement())
  // creator user @relation("creatorUser", fields: [chatId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  chatId Int
  senderId Int
  message String @db.VarChar(1024)
  sendDate DateTime @default(now())
}

model advertisementGlobalVariables{
  advertisementGlobalVariableId Int @id @default(autoincrement())
  nextAdvertisementToDisplay Int
}